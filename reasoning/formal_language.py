# reasoning/formal_language.py

import re
from typing import Tuple, List

# Define regex patterns for each reasoning step
PREDICT_ACTION_PATTERN = re.compile(
    r"PredictAction\((ApplyTactic\('(?P<tactic>[a-zA-Z0-9_]+)'\)|"
    r"QueryOntology\('(?P<query_type>[a-zA-Z0-9_]+)',\s*'(?P<query_param>[a-zA-Z0-9_]+)'\)|"
    r"ProofStrategy\('(?P<strategy>[a-zA-Z0-9_]+)'\))\)"
)

UPDATE_STATE_PATTERN = re.compile(r"UpdateState\((?P<state>S\d+),\s*(?P<action>A\d+)\)")
PREDICT_OBSERVATION_PATTERN = re.compile(r"PredictObservation\((?P<state>S\d+),\s*(?P<observation>O\d+)\)")
EVALUATE_GOAL_PATTERN = re.compile(r"EvaluateGoal\((?P<state>S\d+)\)")
UNPROVABLE_STATEMENT_PATTERN = re.compile(r"Axiom or unprovable statement\. No reasoning steps generated\.")

def parse_reasoning_trace(trace: str) -> List[Tuple]:
    """
    Parses the reasoning trace and returns a list of reasoning steps as tuples.

    :param trace: The reasoning trace string generated by the LLM.
    :return: List of tuples representing reasoning steps.
    """
    reasoning_steps = []
    lines = trace.strip().split('\n')
    for line in lines:
        line = line.strip()
        if line.startswith('-'):
            line = line.lstrip('-').strip()
        # Check for Unprovable Statement
        if UNPROVABLE_STATEMENT_PATTERN.fullmatch(line):
            reasoning_steps.append(('UnprovableStatement',))
            continue

        # Check for PredictAction
        action_match = PREDICT_ACTION_PATTERN.fullmatch(line)
        if action_match:
            if action_match.group('tactic'):
                reasoning_steps.append(('PredictAction', ('ApplyTactic', action_match.group('tactic'))))
            elif action_match.group('query_type') and action_match.group('query_param'):
                reasoning_steps.append(('PredictAction', ('QueryOntology', action_match.group('query_type'), action_match.group('query_param'))))
            elif action_match.group('strategy'):
                reasoning_steps.append(('PredictAction', ('ProofStrategy', action_match.group('strategy'))))
            continue

        # Check for UpdateState
        update_match = UPDATE_STATE_PATTERN.fullmatch(line)
        if update_match:
            reasoning_steps.append(('UpdateState', update_match.group('state'), update_match.group('action')))
            continue

        # Check for PredictObservation
        predict_obs_match = PREDICT_OBSERVATION_PATTERN.fullmatch(line)
        if predict_obs_match:
            reasoning_steps.append(('PredictObservation', predict_obs_match.group('state'), predict_obs_match.group('observation')))
            continue

        # Check for EvaluateGoal
        eval_goal_match = EVALUATE_GOAL_PATTERN.fullmatch(line)
        if eval_goal_match:
            reasoning_steps.append(('EvaluateGoal', eval_goal_match.group('state')))
            continue

        # If line doesn't match any pattern, ignore or handle as needed
        print(f"Unrecognized reasoning step format: {line}")

    return reasoning_steps
