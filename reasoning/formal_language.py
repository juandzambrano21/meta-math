# reasoning/formal_language.py

from lark import Lark, Transformer, exceptions
from typing import Tuple, List


grammar = r"""
    start: reasoning_step+

    reasoning_step: optional_dash step_type

    optional_dash: "-" _WS?

    step_type: action_prediction
             | state_update
             | observation_prediction
             | goal_evaluation
             | navigation_step

    action_prediction: "PredictAction(" action ")"
    state_update: "UpdateState(" state "," action ")"
    observation_prediction: "PredictObservation(" state "," observation ")"
    goal_evaluation: "EvaluateGoal(" state ")"
    navigation_step: move_to | inspect

    move_to: "MoveTo(" node_id ")"
    inspect: "Inspect(" node_id ")"

    state: /S\d+/
    action: /A\d+/
    observation: /O\d+/
    node_id: /[A-Za-z0-9_]+/

    _WS: /[ \t]+/

    %ignore /\s+/
"""

parser = Lark(grammar, start='start')


class ReasoningTransformer(Transformer):
    def state(self, items):
        return str(items[0])

    def action(self, items):
        return str(items[0])

    def observation(self, items):
        return str(items[0])

    def action_prediction(self, items):
        return ('PredictAction', items[0])

    def state_update(self, items):
        return ('UpdateState', items[0], items[1])

    def observation_prediction(self, items):
        return ('PredictObservation', items[0], items[1])

    def goal_evaluation(self, items):
        return ('EvaluateGoal', items[0])

    def navigation_step(self, items):
        return items[0]  # MoveTo or Inspect

    def move_to(self, items):
        return ('MoveTo', items[0])

    def inspect(self, items):
        return ('Inspect', items[0])

    def node_id(self, items):
        return str(items[0])


def parse_reasoning_trace(trace: str) -> List[Tuple]:
    """
    Parses the reasoning trace and returns a list of reasoning steps.

    :param trace: The reasoning trace string generated by the LLM.
    :return: List of tuples representing reasoning steps.
    """
    try:
        tree = parser.parse(trace)
        transformer = ReasoningTransformer()
        reasoning_steps = transformer.transform(tree)
        return reasoning_steps
    except exceptions.LarkError as e:
        print(f"Parsing error: {e}")
        return []
